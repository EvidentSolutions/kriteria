package fi.evident.kriteria.ksp

import com.google.devtools.ksp.processing.*
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.symbol.KSFile
import com.google.devtools.ksp.validate
import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.ksp.addOriginatingKSFile
import com.squareup.kotlinpoet.ksp.toTypeName
import com.squareup.kotlinpoet.ksp.writeTo
import fi.evident.kriteria.jpa.EntityMeta
import jakarta.persistence.Entity

/**
 * Creates a list of all entities in the project.
 */
private class EntityListProcessor(
    private val codeGenerator: CodeGenerator,
    private val packageName: String,
) : SymbolProcessor {

    private val output = mutableListOf<EntityTypeWithFile>()

    override fun process(resolver: Resolver): List<KSAnnotated> {
        val (valid, invalid) = resolver.getClassesWithAnnotation<Entity>().partition { it.validate() }

        for (entity in valid)
            output += EntityTypeWithFile(entity.asType(emptyList()).toTypeName(), entity.containingFile)

        return invalid
    }

    override fun finish() {
        if (output.isEmpty()) return

        val file = FileSpec.builder(packageName, "GeneratedEntityList")
        file.addFileComment("Generated by ${javaClass.simpleName} - do not modify")

        val listType = List::class.asTypeName().parameterizedBy(EntityMeta::class.asClassName().parameterizedBy(STAR, STAR))

        val prop = PropertySpec.builder("generatedEntityMetas", listType, KModifier.INTERNAL)
            .initializer(CodeBlock.builder().add("listOf(\n").apply {
                for (entity in output) {
                    add("%T,\n", entity.typeName)
                }
            }.add(")").build())

        for (entity in output) {
            val containingFile = entity.containingFile
            if (containingFile != null)
                prop.addOriginatingKSFile(containingFile)
        }

        file.addProperty(prop.build())

        file.build().writeTo(codeGenerator, aggregating = true)
    }

    private class EntityTypeWithFile(val typeName: TypeName, val containingFile: KSFile?)
}

class EntityListProcessorProvider : SymbolProcessorProvider {

    override fun create(environment: SymbolProcessorEnvironment): SymbolProcessor =
        EntityListProcessor(
            codeGenerator = environment.codeGenerator,
            packageName = ProcessorConfiguration(environment.options).targetPackage,
        )
}
